#+TITLE: Emacs Literate Configuration
#+AUTHOR: Georgi Bojinov
#+PROPERTY: header-args :tangle init.el

* Configure all the Emacs!
** Table of contents :TOC_4_gh:
- [[#configure-all-the-emacs][Configure all the Emacs!]]
  - [[#package-manager][Package manager]]
    - [[#bootstrap-code-for-the-package-manager---straightel][Bootstrap code for the package manager - ~straight.el~]]
    - [[#install-use-package-for-sane-package-configuration][Install ~use-package~ for sane package configuration]]
  - [[#general-configs][General configs]]
    - [[#set-the-emacs-user-directory][Set the emacs user directory]]
    - [[#set-the-default-font][Set the default font]]
    - [[#set-the-theme-ok-i-like-the-doom-emacs-themes][Set the theme (ok I like the doom emacs themes)]]
    - [[#no-scrollbar-toolbar-menubar-because-bloat][No scrollbar, toolbar, menubar, because bloat]]
    - [[#line-numbers--relative-line-numbers][Line numbers + relative line numbers]]
    - [[#display-battery-in-the-bar][Display battery in the bar]]
  - [[#evil-mode][Evil-mode]]
  - [[#org-mode][Org-mode]]
    - [[#general][General]]
    - [[#org-roam][Org-roam]]
  - [[#magit][Magit]]
  - [[#helm][Helm]]
  - [[#ranger][Ranger]]
  - [[#company][Company]]
  - [[#toc][Toc]]
  - [[#how-do-you][How-do-you]]
  - [[#local-variables][Local Variables]]
  - [[#custom-set-variables][Custom set variables]]

** Package manager
Must be in the beginning for ~use-package~ usage below.
*** Bootstrap code for the package manager - ~straight.el~
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
(unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))
#+end_src

*** Install ~use-package~ for sane package configuration
#+begin_src elisp
(straight-use-package 'use-package)
#+end_src
** General configs
*** Set the emacs user directory
#+begin_src elisp
(let* ((home-dir (getenv "HOME"))
     (custom-emacs-directory (concat home-dir "/.emacs.d")))
  (setq user-emacs-directory custom-emacs-directory))
#+end_src
*** Set the default font
#+begin_src elisp
(if (eq system-type 'gnu/linux)
  (set-default-font "Jet Brains Mono 18")
  (set-default-font "JetBrains Mono 18"))
#+end_src
*** Set the theme (ok I like the doom emacs themes)
#+begin_src elisp
(use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
*** No scrollbar, toolbar, menubar, because bloat
#+begin_src elisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src
*** Line numbers + relative line numbers
#+begin_src elisp
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src
*** Display battery in the bar
#+begin_src elisp
(display-battery-mode t)
#+end_src
** Evil-mode
Vim keybinds and goodness in emacs
Sane window movement

#+begin_src elisp
(use-package evil
  :straight t
  :config
  (evil-mode 1)
  (evil-define-key 'normal 'global
    (kbd "C-h") 'evil-window-left
    (kbd "C-l") 'evil-window-right
    (kbd "C-k") 'evil-window-up
    (kbd "C-j") 'evil-window-down))
#+end_src

Org mode integration with evil

#+begin_src elisp
(use-package evil-org
  :straight t
  :after (evil org)
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (define-key evil-ex-map "e" 'find-file))
#+end_src
** Org-mode
*** General
Installing and configuring org-mode:
1. Use ~org-tempo~ for easier inserting of structure templates
   (e.g. using <s TAB for inserting code blocks)
2. Add some bindings to ~org-agenda~ for day, week view, clocking in and out, add org agenda files.
3. Set refile targets to my various GTD files
4. Set capture templates for ~inbox~ and ~tickler~ GTD entries
5. Set todo keywords
6. Indent, fold org files by default

#+begin_src elisp
(use-package org
  :straight t
  :hook
  (org-mode . visual-line-mode)
  :config
  (require 'org-tempo)
  (eval-after-load 'org-agenda
    '(progn
       (evil-set-initial-state 'org-agenda-mode 'normal)
       (evil-define-key 'normal org-agenda-mode-map
	 "vd" 'org-agenda-day-view
	 "vw" 'org-agenda-week-view
         "I"  'org-agenda-clock-in
         "O"  'org-agenda-clock-out)))
  (setq org-refile-targets
	'(("~/Nextcloud/Orgzly/gtd.org" :maxlevel . 3)
          ("~/Nextcloud/Orgzly/someday.org" :level . 1)
          ("~/Nextcloud/Orgzly/tickler.org" :maxlevel . 2)))
  (setq org-capture-templates
	'(("t" "Todo [inbox]" entry
         (file+headline "~/Nextcloud/Orgzly/inbox.org" "Tasks")
         "* TODO %i%?")
         ("T" "Tickler" entry
         (file+headline "~/Nextcloud/Orgzly/tickler.org" "Tickler")
         "* TODO %i%? \n SCHEDULED: %T")))
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-agenda-files
    '("~/Nextcloud/Orgzly/gtd.org"
      "~/Nextcloud/Orgzly/tickler.org"
      "~/Nextcloud/Orgzly/inbox.org"
      "~/Nextcloud/org/work"))

  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-indent-mode t)
  (setq org-log-done 'note))
#+end_src

Like org bullets, but supercharged?

#+begin_src elisp
(use-package org-superstar
  :straight t
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src
*** Org-roam
The notes (zettelkasten) god

#+begin_src elisp
(use-package org-roam
  :straight t
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Nextcloud/org-roam")
    :bind (:map org-roam-mode-map
      (("C-c n l" . org-roam)
       ("C-c n f" . org-roam-find-file)
       ("C-c n g" . org-roam-graph-show))
      :map org-mode-map
      (("C-c n i" . org-roam-insert))
      (("C-c n I" . org-roam-insert-immediate))))
#+end_src
** Magit
The git supercharge

#+begin_src elisp
(use-package magit
  :straight t)
#+end_src

Something weird with ~emacsclient~ being installed with nix and magit not finding it when not started from a terminal (not sure if this is needed tbh)

#+begin_src elisp
(setq-default with-editor-emacsclient-executable "emacsclient")
#+end_src
** Helm
The searching god

#+begin_src elisp
(use-package helm
  :init
    (require 'helm-config)
    (setq helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t)
  :config
    (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
    (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
    (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
    (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
    (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
    (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
    (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
    (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
    (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
    (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
  :straight t)
#+end_src
** Ranger
The better file manager for emacs

#+begin_src elisp
(use-package ranger
  :straight t
  :config
  (setq ranger-show-hidden t)
  (setq ranger-cleanup-on-disable t))
#+end_src
** Company
Complete all the things!

#+begin_src elisp
(use-package company
  :straight t
  :hook
  (after-init . global-company-mode))
#+end_src

Completion for org-roam

#+begin_src elisp
;; FIXME this is deprecated and now inside org-roam
(use-package company-org-roam
  :straight (:host github :repo "org-roam/company-org-roam")
  :config
  (push 'company-org-roam company-backends))
#+end_src
** Toc
Table of contents on save for org files, it's awesome

#+begin_src elisp
(use-package toc-org
  :straight t
  :hook
  (org-mode . toc-org-mode))
#+end_src
** How-do-you
Your stack overflow and friends inside emacs (and the results are org files!)

#+begin_src elisp
(use-package howdoyou
  :straight t)
#+end_src

** Local Variables
Adds a hook to tangle the file to ~init.el~ after saving.
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

** Custom set variables
#+begin_src elisp :comments link
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(safe-local-variable-values
     (quote
       ((eval add-hook
	     (quote after-save-hook)
	     (lambda nil
	       (org-babel-tangle))
	     nil t)))))
#+end_src

